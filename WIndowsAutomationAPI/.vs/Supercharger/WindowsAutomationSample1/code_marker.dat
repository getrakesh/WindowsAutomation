<ProjectData xmlns="http://schemas.datacontract.org/2004/07/BG8.Supercharger.Features.CodeMarker.Persistence" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><ProjectItemsData xmlns:a="http://schemas.microsoft.com/2003/10/Serialization/Arrays"><a:KeyValueOfstringProjectItemData0bJq_P02M><a:Key>Program.cs</a:Key><a:Value><DataItems xmlns:b="http://schemas.datacontract.org/2004/07/System.Collections.Concurrent"><b:m_serializationArray><DataItem><AbsPos>0</AbsPos><Color>2</Color><Text>using System;&#xD;
using System.Collections.Generic;&#xD;
using System.Diagnostics;&#xD;
using System.Linq;&#xD;
using System.Text;&#xD;
using System.Threading.Tasks;&#xD;
using System.Windows.Automation;&#xD;
&#xD;
namespace WindowsAutomationSample1&#xD;
{&#xD;
    class Program&#xD;
    {&#xD;
        static void Main(string[] args)&#xD;
        {&#xD;
            //Registers a method that handles UI Automation events&#xD;
            System.Windows.Automation.Automation.AddAutomationEventHandler(&#xD;
            eventId: WindowPattern.WindowOpenedEvent,&#xD;
            element: AutomationElement.RootElement,&#xD;
            scope: TreeScope.Children,&#xD;
            eventHandler: OnWindowOpened);&#xD;
&#xD;
&#xD;
            System.Windows.Automation.Automation.AddAutomationFocusChangedEventHandler(OnFocusChanged);&#xD;
&#xD;
            Console.ReadLine();&#xD;
            Automation.RemoveAllEventHandlers();&#xD;
&#xD;
        }&#xD;
        private static void OnWindowOpened(object sender, AutomationEventArgs automationEventArgs)&#xD;
        {&#xD;
            try&#xD;
            {&#xD;
                var element = sender as AutomationElement;&#xD;
                if (element != null)&#xD;
                    Console.WriteLine("New Window opened: {0}", element.Current.Name);&#xD;
            }&#xD;
            catch (ElementNotAvailableException)&#xD;
            {&#xD;
            }&#xD;
        }&#xD;
        static AutomationElement _lastWindow;&#xD;
        private static void OnFocusChanged(object sender, AutomationFocusChangedEventArgs e)&#xD;
        {&#xD;
            AutomationElement elementFocused = sender as AutomationElement;&#xD;
&#xD;
            if (elementFocused == null)&#xD;
                return;&#xD;
&#xD;
            try&#xD;
            {&#xD;
                AutomationElement topLevelWindow = GetParentWindow(elementFocused);&#xD;
                if (topLevelWindow == null)&#xD;
                    return;&#xD;
&#xD;
                if (topLevelWindow != _lastWindow)&#xD;
                {&#xD;
                    _lastWindow = topLevelWindow;&#xD;
                    Console.WriteLine("Focus moved to window: {0}", topLevelWindow.Current.Name);&#xD;
                    var child = topLevelWindow.FindAll(TreeScope.Children, Condition.TrueCondition);&#xD;
                    Console.WriteLine("...child element");&#xD;
                    foreach (var c in child)&#xD;
                    {&#xD;
                        var ch = (AutomationElement)c;&#xD;
                        Console.WriteLine(ch.Current.Name);&#xD;
                        Console.WriteLine(ch.Current.AutomationId);&#xD;
&#xD;
&#xD;
                    }&#xD;
                }&#xD;
                else&#xD;
                {&#xD;
                    Console.WriteLine("Focused element: Type: '{0}', Name:'{1}'",&#xD;
                    elementFocused.Current.LocalizedControlType, elementFocused.Current.Name);&#xD;
                }&#xD;
                &#xD;
            }&#xD;
            catch (ElementNotAvailableException)&#xD;
            {&#xD;
            }&#xD;
        }&#xD;
&#xD;
        private static AutomationElement GetParentWindow(AutomationElement element)&#xD;
        {&#xD;
            AutomationElement node = element;&#xD;
            try&#xD;
            {&#xD;
                while (!Equals(node.Current.ControlType, ControlType.Window))&#xD;
                {&#xD;
                    node = TreeWalker.ControlViewWalker.GetParent(node);&#xD;
                    if (node == null)&#xD;
                        return null;&#xD;
                }&#xD;
&#xD;
                return node;&#xD;
            }&#xD;
            catch (ElementNotAvailableException)&#xD;
            {&#xD;
            }&#xD;
&#xD;
            return null;&#xD;
        }&#xD;
    }&#xD;
    public static class AutomationExtensions&#xD;
    {&#xD;
        public static string GetText(this AutomationElement element)&#xD;
        {&#xD;
            object patternObj;&#xD;
            if (element.TryGetCurrentPattern(ValuePattern.Pattern, out patternObj))&#xD;
            {&#xD;
                var valuePattern = (ValuePattern)patternObj;&#xD;
                return valuePattern.Current.Value;&#xD;
            }&#xD;
            else if (element.TryGetCurrentPattern(TextPattern.Pattern, out patternObj))&#xD;
            {&#xD;
                var textPattern = (TextPattern)patternObj;&#xD;
                return textPattern.DocumentRange.GetText(-1).TrimEnd('\r'); // often there is an extra '\r' hanging off the end.&#xD;
            }&#xD;
            else&#xD;
            {&#xD;
                return element.Current.Name;&#xD;
            }&#xD;
        }&#xD;
    }&#xD;
}&#xD;
</Text></DataItem></b:m_serializationArray></DataItems><ProjectItemFileName>Program.cs</ProjectItemFileName></a:Value></a:KeyValueOfstringProjectItemData0bJq_P02M></ProjectItemsData><ProjectName>WindowsAutomationSample1</ProjectName></ProjectData>